// Reverse of linked list:
SOURCE CODE:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
void reverse(ListNode* &head,ListNode* curr,ListNode* prev){
    if(curr ==NULL){
        head=prev;
        return;
    }
    reverse(head,curr->next,curr);
    curr->next=prev;
}
    ListNode* reverseList(ListNode* head) {
        //iteretive approach
        // ListNode* prev=NULL;
        // ListNode* curr=head;
        // ListNode* forward;
        // while(curr != NULL){
        // forward=curr->next;
        // curr->next=prev;
        // prev=curr;
        // curr=forward;
        

        // }
        // head=prev;
        // return head;
        //recursive approach:
        ListNode* curr=head;
        ListNode* prev=NULL;
        reverse(head,curr,prev);
        return head;


    }
};
