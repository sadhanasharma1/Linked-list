//Statement: Suppose we are two number in the form of linked list ans we have to return its sum as a linked list then we will use the apprroach below:

//SOURCE CODE:
\/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
//TO INSERT AT TAIL
void insert_tail(ListNode* &head,ListNode* &tail,int val){
    ListNode* temp=new ListNode(val);
    if(head==NULL ){
        head=temp;
        tail=temp;
        return; }
        else{
        tail->next=temp;
        tail=temp;}
      
}
//FOR THE ADDITION OF THE LINKED LIST
ListNode* add(ListNode* &l1,ListNode* &l2){
    ListNode* temp1=l1;
    ListNode* temp2=l2;
    ListNode* ansHead=NULL;
    ListNode* ansTail=NULL;
    int carry=0;
    int sum=0;
    while(temp1 != NULL && temp2 != NULL){
     sum = carry + temp1->val + temp2->val;
     int digit= sum %10;
     insert_tail(ansHead,ansTail,digit);
     carry=sum/10;
     temp1=temp1->next;
     temp2=temp2->next;
 }
 while(temp1 != NULL && temp2 ==NULL){
     sum=carry + temp1->val;
     int digit=sum%10;
     insert_tail(ansHead,ansTail,digit);
     carry=sum/10;
     temp1=temp1->next;
 }
  while(temp2 != NULL && temp1 ==NULL){
     sum=carry + temp2->val;
     int digit=sum%10;
     insert_tail(ansHead,ansTail,digit);
     carry=sum/10;
      temp2=temp2->next;
 }
 while(carry !=0 && temp1==NULL && temp2==NULL){
     sum=carry;
     int digit=sum%10;
     insert_tail(ansHead,ansTail,digit);
     carry=sum/10;
 }
    return ansHead;
}
ListNode* reverse(ListNode* &head){
    ListNode* curr=head;
    ListNode* prev=NULL;
    ListNode* forw=NULL;
    while(curr != NULL){
        forw=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forw;
    }
    return prev;
}
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        //STEP 1: REVERSE BOTH THE LISTS:
        l1=reverse(l1);
        l2=reverse(l2);
        //STEP 2:  ADD THE NODES:
        ListNode* ans= add(l1,l2);
        //STEP 3: reverse the ans list :
       ans=reverse(ans);
        return ans;
    }
};
