// This code will check the palindrome with Time complexity O(N) and Space complexity O(1):
//source code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middle(ListNode*  &head){
          ListNode* slow=head;
          ListNode* fast=head->next;
          while(fast != NULL && fast->next != NULL){
              fast=fast->next->next;
              slow=slow->next;

          }
          return slow;
    }
    ListNode*  reverse(ListNode* & head){
        ListNode*  prev=NULL;
        ListNode*  curr=head;
        ListNode*  forward=NULL;
        while(curr != NULL){
            forward=curr->next;
            curr->next=prev;
            prev=curr;
            curr=forward;
        }
        return prev;

    }
    bool isPalindrome(ListNode* head) {
if(head->next==NULL){
    return true;
}
if(head->next->next == NULL){
    if(head->val==head->next->val)
    return true;
       return false;
}
//step 1: find the mid:
   ListNode*  mid=middle(head);
   //step 2: reverse the list after mid
  
  mid->next=  reverse(mid->next);
  //step 3 compare both halves:
  ListNode*  head1=head;
  ListNode*  head2=mid->next;
  while(head2 != NULL){
      if(head1->val!= head2 ->val)
      return false;
      head1=head1->next;
      head2=head2->next;
  } return true;

    }
};
