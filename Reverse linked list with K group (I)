// REVERSING TYHE LINKED LIST WITH K GROUPS 

SOURCE CODE:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
  int length(ListNode* &head){
      ListNode* p=head;
      int ans=0;
      while(p != NULL){
          ans++;
          p=p->next;
      }
      return ans;
  }
    ListNode* reverseKGroup(ListNode* head, int k) {




        //STEP:1
        if(head==NULL)
        return NULL;
//when number of nodes is less then k then no reversal possible: so just return head
        if(length(head)<k)
        return head;
        //step2:
         ListNode* prev=NULL;
         ListNode* next=NULL;
         ListNode* curr=head;
         int cnt=0;
         while(curr != NULL && cnt <k){
             next=curr->next;
             curr->next=prev;
             prev=curr;
             curr=next;
             cnt++;
         }
         //step: 3
         if(next != NULL){
             head->next= reverseKGroup(next,k);
         }
  return prev;
  
    }
    
};
